1-Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de x milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.
#include <msp430g2553.h>
#include <intrinsics.h>

//#define PERIODO 62500  // PISCA EM 1 SEGUNDO; 1 HZ COM ID_3
#define PERIODO 125    // PISCA EM 1000HZ COM ID_2

#define LED BIT0

void Atraso(volatile unsigned int x){
        TA0CCR0 =((PERIODO-1)*x); //10000-1;
	TA0CTL = TASSEL_2 + ID_2 + MC_1 + TAIE;
	//_BIS_SR(LPM0_bits+GIE);
        while(1){
        while((TA0CTL & TAIFG)==0);
	P1OUT ^= LED;
	TA0CTL &= ~TAIFG;
}
}

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT &= ~LED;
	P1DIR |= LED;
        Atraso(x);
       
	
	
}

/*#pragma vector = TIMER0_A1_VECTOR
__interrupt void TIMER0_TA0_ISR(void)
{
	P1OUT ^= LED;
	TA0CTL &= ~TAIFG;
}  */
2-Pisque os LEDs da Launchpad numa frequência de 100 Hz.

atraso(10);

3-Pisque os LEDs da Launchpad numa frequência de 20 Hz.

atraso(50);

4-Pisque os LEDs da Launchpad numa frequência de 1 Hz.

atraso(1000);

5-Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

atraso(2000);

6-Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.
#include <msp430g2553.h>
#include <intrinsics.h>

//#define PERIODO 62500  // PISCA EM 1 SEGUNDO; 1 HZ COM ID_3
#define PERIODO 125    // PISCA EM 1000HZ COM ID_2

#define LED BIT0

void Atraso(volatile unsigned int x){
        TA0CCR0 =((PERIODO-1)*x); //10000-1;
	TA0CTL = TASSEL_2 + ID_2 + MC_1 + TAIE;
	_BIS_SR(LPM0_bits+GIE);
}

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz
	DCOCTL = CALDCO_1MHZ;		//MCLK e SMCLK @ 1MHz
	P1OUT &= ~LED;
	P1DIR |= LED;
       Atraso(x);
       
	
	
}

#pragma vector = TIMER0_A1_VECTOR
__interrupt void TIMER0_TA0_ISR(void)
{
	P1OUT ^= LED;
	TA0CTL &= ~TAIFG;
}
usar a função atraso e substituir x por:
6.2- x=10;
6.3- x=50;
6.4- x=1000;
6.5- x=2000;

7-Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. 
Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período 
de 1 ms entre os bits.

8-Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa 
com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos 
bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

9-Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o Timer_A
em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que 
somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos 
para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.

#include <msp430g2553.h>

#define LED BIT6

#define PERIODO 62500
/*#define ciclo_de_trabalho 10
#define freqs 1 */

void ConfigPWM(volatile unsigned int freqs, volatile unsigned int ciclo_de_trabalho){
       
	BCSCTL1 = CALBC1_1MHZ;
	DCOCTL = CALDCO_1MHZ;
	P1DIR |= LED;
	P1SEL |= LED;
	P1SEL2 &= ~LED;
        TACCR0 = ((PERIODO-1)/freqs);
	TACCR1 = ciclo_de_trabalho-1;
	TACCTL1 = OUTMOD_7;
	TACTL = TASSEL_2 + ID_3 + MC_1;
	_BIS_SR(LPM0_bits);
	
        }
int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;
	
	ConfigPWM(freqs,ciclo_de_trabalho);
       
        }