Para cada questão, escreva funções em C e/ou sub-rotinas na linguagem Assembly do MSP430. Reaproveite funções e sub-rotinas de uma 
questão em outra, se assim desejar. Leve em consideração que as sub-rotinas são utilizadas em um código maior, portanto utilize 
adequadamente os registradores R4 a R11. As instruções da linguagem Assembly do MSP430 se encontram ao final deste texto.

1.(a) Escreva uma função em C que calcule a raiz quadrada x de uma variável S do tipo float, utilizando o seguinte algoritmo: 
após n+1 iterações, a raiz quadrada de S é dada por:

x(n+1) = (x(n) + S/x(n))/2

O protótipo da função é:

#include <stdio.h>
unsigned int Raiz_Quadrada(unsigned int s)
{
    unsigned int x=1,p=s;
    while(p>0){
    p-=1;
    x=(((s/x)+x)/2);
    }
    return x;
}

main(){
    unsigned int s=0,x;
    printf("Digite o numero para tirar raiz:\n");
    scanf("%d",&s);
    x=Raiz_Quadrada(s);
    printf("%d\n",x);
}


(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável S é fornecida pelo registrador R15, e a raiz 
quadrada de S (ou seja, a variável x) é fornecida pelo registrador R15 também.
S-> R15, X->R11, RES -> R10, AUX->R8
;*******RAIZ EM ASSEMBLY*****************************************
;*******DIVISÃO ASSEMBLY********************************
DIV:
clr.w R10                             ; R1O=0
MOV.W R11,R8                          ; R8=R11
COND_DIV:
comp r15,r11                          ; r15>r11 ou r15=r11
jn   SAIR                             ; se NÃO satisfazer a condição acima termina o programa
INC.W R10                             ; R10++1
ADD.W R11,R8                          ; R9=R11+R8
JUMP COND_DIV                         ; SAIR DA CONDIÇÃO
SAIR:
;PUSH.W R10                            ; COLOCOU NA PILHA O VALOR DE 
RET                                   ; RETORNA AO ENDEREÇO QUE A CHAMOU




raiz_babilonico:                       ;Rótulo da função
mov.w #1,R11                           ; x=1
mov.w R15,R9                           ;aux=p=s
WHILE:
test R9                                ; R9-0
jeq  EXIT                              ;
DEC.W R9                               ; P-=1
EXIT:
PUSH.W R15                               ; guarde S na pilha
PUSH.W R14                               ; guarde x na pilha
CALL #DIV                               ; S/X
ADD.W  R11 ,R10                         ;(s/x)+x)
RRA.W R10                               ;(((s/x)+x)/2)
MOV.W R10,R14;                          ;x=(((s/x)+x)/2)
PUSH.W R14
RET                                      ; retorna aonde a função foi chamada

2.(a) Escreva uma função em C que calcule x elevado à N-ésima potência, seguindo o seguinte protótipo:
;************************************** EM C *************************************************************************************
/*int Potencia(int x, int N){
int x,N,i;
for(i<n; i=0; i++){
x*=x;
}
return x;
}*/

#include <stdio.h>

int MULT_unsigned(int a, int b)
{
if(b==0) return 0;
else
return (a+MULT_unsigned(a, b-1));
}
int MULT_signed(int a, int b)
{
	if(a<0 && b<0)
	{	a = -a;
		b = -b;
		return MULT_unsigned(a,b);
	}
	else if (a<0 && b>0)
	{	a = -a;
		return -(MULT_unsigned(a,b));
	}
	else if (a>0 && b<0)
	{	b = -b;
		return -(MULT_unsigned(a,b));
	}
	else
	{	return MULT_unsigned(a,b);
	}

}
int Potencia(int x, int     N){

    if(N==0) return 1;
    else   return(MULT_signed(x,Potencia(x,N-1)));
}

int main(){
    int N,x,resultado=0;
    printf("Escreva os fatores do produto:\n");
    scanf("%d\n%d",&x,&N);
    resultado=Potencia(x,N);

    printf("%d\n",resultado);
}
*******************************************************************************************************************************

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. x e n são fornecidos através dos registradores R15 e R14, 
respectivamente, e a saída deverá ser fornecida no registrador R15.
****** EM ASSEMBLY, APROVEITANDO OS CÓDIGOS DE MULTIPLICAÇÃO VISTOS EM SALA DE AULA********************************************
MULT_unsigned:
	tst.w R14 ; b==0 ?
	jnz MULT_unsigned_else ; Se b não é zero, vá para o else
	clr.w R15 ; return 0
ret
MULT_unsigned_else:
	push.w R15 ; Guarde a na pilha
	dec.w R14 ; b--
	call #MULT_unsigned ; Calcule a*(b-1)
	pop.w R14 ; Recupere a na pilha
	add.w R14, R15 ; return a + a*(b-1)
ret

MULT_signed:
	tst.w R14 ; b<0 ?
	jge MULT_signed_else ; Se b>=0, não é necessário trocar sinais
	inv.w R15 ; a = -a usando complemento de 2
	inc.w R15
	inv.w R14 ; b = -b usando complemento de 2
	inc.w R14
	MULT_signed_else:
	call #MULT_unsigned
ret ; Retorne da subrotina
; testar em assembly
POTENCIA:
	push.w R15 ; Guarde a na pilha
	call #MULT_signed
	call #POTENCIA ; Calcule a*(b-1)
	pop.w R14 ; Recupere a na pilha
	add.w R14, R15 ; return a + a*(b-1)
ret 


3.Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula a divisão de a por b, onde a, b e o valor de saída são inteiros 
de 16 bits. a e b são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do 
registrador R15.
em c:

int div(int D, int q){         // I =D/Q 
    int i=0,aux=q;
 while(aux < D || aux==D){
    i++;
    aux=aux+q;
    }
    return i;
}
;**************************************************assembly*******************************************************************
DIV:
clr.w R10                             ; R1O=0 -> I
MOV.W R14,R8                          ; R8=R14 -> AUX=Q
COND_DIV:
comp R15,R14                          ; r15>r14 ou r15=r14
jn   SAIR                             ; se NÃO satisfazer a condição acima termina o programa
INC.W R10                             ; R10++1
ADD.W R14,R8                          ; R9=R14+R8
JUMP COND_DIV                         ; SAIR DA CONDIÇÃO
SAIR:
PUSH.W R10                            ; COLOCOU NA PILHA O VALOR DE 
CLR.W R15                             ;
POP.w R15                             ; retorando o valor em R15
RET                                   ; RETORNA AO ENDEREÇO QUE A CHAMOU

int main(){
    int D,q,res;
    printf("Escreva o Divisor,quociente:\n");
    scanf("%i\n",&D);
    scanf("%i\n",&q);
    res=div(D,q);
    printf("%d\n",resto);
}
;********************************************************************************************************************************


4.Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o resto da divisão de a por b, onde a, b e o valor de saída 
são inteiros de 16 bits. a e b são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida
através do registrador R15.
em c:
#include <stdio.h>

int MULT_unsigned(int a, int b)
{
if(b==0) return 0;
else
return (a+MULT_unsigned(a, b-1));
}
int MULT_signed(int a, int b)
{
	if(a<0 && b<0)
	{	a = -a;
		b = -b;
		return MULT_unsigned(a,b);
	}
	else if (a<0 && b>0)
	{	a = -a;
		return -(MULT_unsigned(a,b));
	}
	else if (a>0 && b<0)
	{	b = -b;
		return -(MULT_unsigned(a,b));
	}
	else
	{	return MULT_unsigned(a,b);
	}

}
int div(int D, int q){
    int i=0,aux=q;
 while(aux < D || aux==D){
    i++;
    aux=aux+q;
    }
    return i;
}
int res_div(int D, int d,int q){
    return (D-MULT_signed(q,d));

}
int main(){
    int D,q,d,resto;
    printf("Escreva o Divisor,quociente:\n");
    scanf("%i\n",&D);
    scanf("%i\n",&q);
    d=div(D,q);
    printf("%d\n",d);
    resto=res_div(D,d,q);
    printf("%d",resto);
}
;*******DIVISÃO ASSEMBLY********************************
DIV:
clr.w R10                             ; R1O=0
MOV.W R11,R8                          ; R8=R11
COND_DIV:
comp r15,r11                          ; r15>r11 ou r15=r11
jn   SAIR                             ; se NÃO satisfazer a condição acima termina o programa
INC.W R10                             ; R10++1
ADD.W R11,R8                          ; R9=R11+R8
JUMP COND_DIV                         ; SAIR DA CONDIÇÃO
SAIR:
;PUSH.W R10                            ; COLOCOU NA PILHA O VALOR DE 
RET                                   ; RETORNA AO ENDEREÇO QUE A CHAMOU




RESTO:                                  ;Rótulo da função

PUSH.W R15                               ; guarde S na pilha
PUSH.W R14                               ; guarde x na pilha
CALL #DIV                                ; A/B
MOV.W R10,R15                            ;
POP.W R10                                ;A
POP.W R14                                ;B
MOV.W R10,R15                            ;
CALL #MULT_signed                        ;RES*B
SUB.W R15,R10                            ; A - RES*B ARMAZENADO EM R10[RESTO]
RET


5.(a) Escreva uma função em C que indica a primalidade de uma variável inteira sem sinal, retornando o valor 1 se o número for primo, 
e 0, caso contrário. Siga o seguinte protótipo:

int Primalidade(unsigned int x){
int x,v2,v3,v5,v7,primo;
v2=x%2;
v3=x%3;
v5=x%5;
v7=x%7;
if(v2==1 || v3==1 || v5==1 || v7==0){
primo=1;
}
else
primo=0;

}
avaliar se é divisivel por 2 ou 3 ou 5 ou 7;
caso contrário é primo;

PRIMO:
MOV #2,R14
CALL #RESTO
COMP R15,#1
JNE EH_PRIMO
JUMP N_EH_PRIMO

MOV #3,R14
CALL #RESTO
COMP R15,#1
JNE EH_PRIMO
JUMP N_EH_PRIMO

MOV #3,R14
CALL #RESTO
COMP R15,#1
JNE EH_PRIMO
JUMP N_EH_PRIMO

MOV #7,R14
CALL #RESTO
COMP R15,#1
JNE EH_PRIMO
JUMP N_EH_PRIMO

COMP R15,#8
JN EH_PRIMO
JUMP N_EH_PRIMO
EH_PRIMO:
MOV.W R15,#1
N_EH_PRIMO:
MOV.W R15,#0
RET

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável de entrada é fornecida pelo registrador R15, 
e o valor de saída também.

6.Escreva uma função em C que calcula o duplo fatorial de n, representado por n!!. Se n for ímpar, n!! = 135*...n, e se n for
par, n!! = 246...n. Por exemplo, 9!! = 13579 = 945 e 10!! = 2468*10 = 3840. Além disso, 0!! = 1!! = 1. O protótipo da função é:

unsigned long long DuploFatorial(unsigned long long n);


7. (a) Escreva uma função em C que calcula a função exponencial utilizando a série de Taylor da mesma. Considere o cálculo até
o termo n = 20. O protótipo da função é 

double ExpTaylor(double x); 
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
// e^x para 20 termos
int fatorial( int n )
{
if ( n <= 1 )
return 1;
else
return  n*fatorial(n-1);
}

double ExpTaylor (int n_term, double x)
{
if (n_term <= 1)
return 1;
else
return ExpTaylor(n_term-1, x) + pow(x, n_term-1)/fatorial(n_term-1);
}

int main()

{
double y,x=2;
y =ExpTaylor(20,x);
printf("taylor eh %f\n", y);
return 0;
}


(b) Escreva a sub-rotina equivalente na linguagem Assembly 
do MSP430, mas considere que os valores de entrada e de saída são inteiros de 16 bits. A variável de entrada é fornecida pelo
registrador R15, e o valor de saída também.


8.Escreva uma sub-rotina na linguagem Assembly do MSP430 que indica se um vetor esta ordenado de forma decrescente.Por exemplo:
[5 4 3 2 1] e [90 23 20 10] estão ordenados de forma decrescente. [1 2 3 4 5] e [1 2 3 2] não estão. O primeiro endereço do vetor 
é fornecido pelo registrador R15, e o tamanho do vetor é fornecido pelo registrador R14. A saída deverá ser fornecida no registrador 
R15, valendo 1 quando o vetor estiver ordenado de forma decrescente, e valendo 0 em caso contrário.

9.Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o produto escalar de dois vetores, a e b. O primeiro endereço
do vetor a deverá ser passado através do registrador R15, o primeiro endereço do vetor b deverá ser passado através do registrador 
R14, e o tamanho do vetor deverá ser passado pelo registrador R13. A saída deverá ser fornecida no registrador R15.

10.(a) Escreva uma função em C que indica se um vetor é palíndromo. Por exemplo: [1 2 3 2 1] e [0 10 20 20 10 0] 
são palíndromos.[5 4 3 2 1] e [1 2 3 2] não são. Se o vetor for palíndromo, retorne o valor 1. Caso contrário, 
retorne o valor 0. O protótipo da função é:

int Palindromo(int vetor[ ], int tamanho);
int Palindromo(int *p,int tamanho)
{
	int i=0;
	while(i<tamanho)
	{
		if(p[i]!=p[(tamanho-1)-i])
		{
			return 0;
		}
    i++;
	}
	return 1;
}

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. O endereço do vetor de entrada é dado pelo registrador 
R15, o tamanho do vetor é dado pelo registrador R14, e o resultado é dado pelo registrador R15.